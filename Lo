local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")
local camera = workspace.CurrentCamera

-- Play the animation when the script is executed
local AnimAnim = Instance.new("Animation")
AnimAnim.AnimationId = "rbxassetid://18464351556"
local Anim = humanoid:LoadAnimation(AnimAnim)

-- Function to tween the character's movement with camera adjustments
local function tweenTeleport()
    local tweenService = game:GetService("TweenService")
    local tweenInfo = TweenInfo.new(1.4, Enum.EasingStyle.Linear) -- Adjust duration as needed
    
    -- Function to calculate the direction based on the cameraâ€™s CFrame
    local function getDirection()
        local cameraCFrame = camera.CFrame
        local horizontalLookVector = Vector3.new(cameraCFrame.LookVector.X, 0, cameraCFrame.LookVector.Z).Unit
        return horizontalLookVector * 150 -- Move backward relative to the camera's horizontal view
    end
    
    -- Create the tween
    local startCFrame = rootPart.CFrame
    local endCFrame = CFrame.new(startCFrame.Position + getDirection(), startCFrame.Position + getDirection() + camera.CFrame.LookVector)
    local goal = {CFrame = endCFrame}
    local tween = tweenService:Create(rootPart, tweenInfo, goal)

    -- Update the tween position based on camera movement
    local startTime = tick()
    local function updateTween()
        local elapsedTime = tick() - startTime
        if elapsedTime < tweenInfo.Time then
            -- Recalculate the endCFrame to follow the camera
            local direction = getDirection()
            endCFrame = CFrame.new(startCFrame.Position + direction, startCFrame.Position + direction + camera.CFrame.LookVector)
            tween:Cancel()  -- Cancel the previous tween
            goal.CFrame = endCFrame
            tween = tweenService:Create(rootPart, tweenInfo, goal)
            tween:Play()
        end
    end
    
    -- Play and continuously update the tween
    tween:Play()
    while tick() - startTime < tweenInfo.Time do
        updateTween()
        wait(0.1)  -- Adjust the update interval as needed
    end
    
    -- Return the tween so it can be stopped later
    return tween
end

-- Execute actions in the correct sequence
wait(2.7)  -- Wait for 3 seconds before starting

-- Start the animation
Anim:Play()
Anim.TimePosition = 0
Anim:AdjustSpeed(1)

wait(0.7)

-- Start the teleport after the animation has stopped
local tween = tweenTeleport()

-- Wait for 3.5 seconds and then stop everything
wait(3.5)
Anim:Stop()  -- Stop the animation
tween:Stop()  -- Stop the tween
