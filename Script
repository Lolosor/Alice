local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/Lolosor/Alice/main/Cave"))()
local Window = Library.CreateLib("Alice Hub", "Synapse")
local Tab = Window:NewTab("Main")
local Section = Tab:NewSection("Characters FE")
Section:NewButton("Saitama To Gojo", "", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/Lolosor/Alice/main/Saitama%20to%20gojo"))()
end)
Section:NewButton("Saitama To M1 Master", "", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/Lolosor/Alice/main/M1%20Master"))()
end)
Section:NewButton("Garou To Combat", "", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/Lolosor/Alice/main/Combat"))()
end)
Section:NewButton("Garou To Sukuna", "", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/Lolosor/Alice/main/Sukuna"))()
end)
Section:NewButton("Garou To Cosmic Garou", "", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/Lolosor/Alice/main/Cosmic%20Garou%20Glitcher"))()
end)
Section:NewButton("Garou To Goku", "", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/Lolosor/Alice/main/Goku"))()
end)
Section:NewButton("Saitama To KJ", "", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/Lolosor/Alice/main/KJ"))()
end)
local Tab = Window:NewTab("Animations")
local Section = Tab:NewSection("Animations")
Section:NewButton("Alice Animations", "By allah_isthebest/Alice", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/Lolosor/Alice/main/Anima"))()
end)
local Tab = Window:NewTab("Fun")
local Section = Tab:NewSection("Fun")
Section:NewButton("Head View", "", function()
    -- Load external scripts
loadstring(game:HttpGet("https://raw.githubusercontent.com/Lolosor/Alice/main/Inf2"))()

-- Custom GUI code
local Players = game:GetService("Players")
local player = Players.LocalPlayer

-- Create a ScreenGui for the player's PlayerGui
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = player:WaitForChild("PlayerGui")

-- Create the TextLabel
local textLabel = Instance.new("TextLabel")
textLabel.Parent = screenGui
textLabel.Size = UDim2.new(0, 200, 0, 50)
textLabel.Position = UDim2.new(0.5, 0, 0, 30)
textLabel.AnchorPoint = Vector2.new(0.5, 0)
textLabel.BackgroundTransparency = 1
textLabel.Text = "Make sure to use cmd fixcam in infinity yield to fix camera"
textLabel.TextColor3 = Color3.new(1, 1, 1)
textLabel.Font = Enum.Font.SourceSans
textLabel.TextSize = 24

-- Define the player
local player = game.Players.LocalPlayer

-- Adjust Settings (assuming 'Communicate' is valid)
local args = {
    [1] = {
        ["setting"] = "S_ShiftLock",
        ["Goal"] = "Adjust Setting",
        ["set"] = true
    }
}

-- Check if the 'Communicate' method exists
local character = player.Character or player.CharacterAdded:Wait()
if character:FindFirstChild("Communicate") then
    character.Communicate:FireServer(unpack(args))
else
    warn("Communicate method not found")
end

local camera = game.Workspace.CurrentCamera
local userInputService = game:GetService("UserInputService")
local runService = game:GetService("RunService")

local touchStart = nil
local touchSensitivity = 0.015
local screenWidth = camera.ViewportSize.X

local touchMovedConnection
local touchEndedConnection
local mouseMovedConnection

-- Function to set up first-person view
local function setupFirstPersonView()
    local character = player.Character or player.CharacterAdded:Wait()
    local head = character:FindFirstChild("Head")

    if head then
        camera.CameraSubject = head
        camera.CameraType = Enum.CameraType.Custom
        camera.CFrame = head.CFrame
    end
end

-- Function to update the camera and remove GUI if needed
local function updateCamera()
    local character = player.Character or player.CharacterAdded:Wait()
    local head = character:FindFirstChild("Head")

    if head then
        camera.CFrame = head.CFrame
    end

    -- Check if the camera's subject is a Humanoid
    if camera.CameraSubject and camera.CameraSubject:IsA("Humanoid") then
        local playerGui = player:FindFirstChild("PlayerGui")
        if playerGui then
            local turnCharacterGui = playerGui:FindFirstChild("TurnCharacter")
            if turnCharacterGui then
                turnCharacterGui:Destroy()
                print("TurnCharacter GUI removed")
            end
        end

        -- Disconnect both touch and mouse input handlers
        if touchMovedConnection then
            touchMovedConnection:Disconnect()
            touchMovedConnection = nil
        end

        if touchEndedConnection then
            touchEndedConnection:Disconnect()
            touchEndedConnection = nil
        end

        if mouseMovedConnection then
            mouseMovedConnection:Disconnect()
            mouseMovedConnection = nil
        end
    end
end

-- Handle touch input for rotating the camera (Mobile)
local function onTouchInput(input)
    if input.UserInputType == Enum.UserInputType.Touch then
        if input.Position.X > screenWidth / 2 then
            if not touchStart then
                touchStart = input.Position
            else
                local delta = input.Position - touchStart
                touchStart = input.Position
                local rotation = CFrame.Angles(0, -delta.X * touchSensitivity, 0)
                local character = player.Character or player.CharacterAdded:Wait()
                local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
                humanoidRootPart.CFrame = humanoidRootPart.CFrame * rotation
            end
        end
    end
end

-- Handle mouse input for rotating the camera (PC)
local function onMouseInput(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        local delta = input.Delta
        local rotation = CFrame.Angles(0, -delta.X * 0.01, 0)
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        humanoidRootPart.CFrame = humanoidRootPart.CFrame * rotation
    end
end

-- Handle touch input end
local function onTouchEnd(input)
    if input.UserInputType == Enum.UserInputType.Touch then
        touchStart = nil
    end
end

-- Initial setup
setupFirstPersonView()

-- Update the camera every frame
runService.RenderStepped:Connect(function()
    updateCamera()
end)

-- Detect if it's mobile or PC
if userInputService.TouchEnabled then
    -- Mobile: Connect touch input handlers
    touchMovedConnection = userInputService.TouchMoved:Connect(onTouchInput)
    touchEndedConnection = userInputService.TouchEnded:Connect(onTouchEnd)
else
    -- PC: Connect mouse input handler
    mouseMovedConnection = userInputService.InputChanged:Connect(onMouseInput)
end

wait(5)
screenGui:Destroy()
end)
Section:NewButton("Torso View", "", function()
    -- Load external scripts
loadstring(game:HttpGet("https://raw.githubusercontent.com/Lolosor/Alice/main/Inf2"))()

-- Custom GUI code
local Players = game:GetService("Players")
local player = Players.LocalPlayer

-- Create a ScreenGui for the player's PlayerGui
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = player:WaitForChild("PlayerGui")

-- Create the TextLabel
local textLabel = Instance.new("TextLabel")
textLabel.Parent = screenGui
textLabel.Size = UDim2.new(0, 200, 0, 50)
textLabel.Position = UDim2.new(0.5, 0, 0, 30)
textLabel.AnchorPoint = Vector2.new(0.5, 0)
textLabel.BackgroundTransparency = 1
textLabel.Text = "Make sure to use cmd fixcam in infinity yield to fix camera"
textLabel.TextColor3 = Color3.new(1, 1, 1)
textLabel.Font = Enum.Font.SourceSans
textLabel.TextSize = 24

-- Define the player
local player = game.Players.LocalPlayer

-- Adjust Settings (assuming 'Communicate' is valid)
local args = {
    [1] = {
        ["setting"] = "S_ShiftLock",
        ["Goal"] = "Adjust Setting",
        ["set"] = true
    }
}

-- Check if the 'Communicate' method exists
local character = player.Character or player.CharacterAdded:Wait()
if character:FindFirstChild("Communicate") then
    character.Communicate:FireServer(unpack(args))
else
    warn("Communicate method not found")
end

local camera = game.Workspace.CurrentCamera
local userInputService = game:GetService("UserInputService")
local runService = game:GetService("RunService")

local touchStart = nil
local touchSensitivity = 0.015
local screenWidth = camera.ViewportSize.X

local touchMovedConnection
local touchEndedConnection
local mouseMovedConnection

-- Function to set up first-person view
local function setupFirstPersonView()
    local character = player.Character or player.CharacterAdded:Wait()
    local head = character:FindFirstChild("Torso")

    if head then
        camera.CameraSubject = character:FindFirstChild("Torso")
        camera.CameraType = Enum.CameraType.Custom
        camera.CFrame = head.CFrame
    end
end

-- Function to update the camera and remove GUI if needed
local function updateCamera()
    local character = player.Character or player.CharacterAdded:Wait()
    local head = character:FindFirstChild("Torso")

    if head then
        camera.CFrame = head.CFrame
    end

    -- Check if the camera's subject is a Humanoid
    if camera.CameraSubject and camera.CameraSubject:IsA("Humanoid") then
        local playerGui = player:FindFirstChild("PlayerGui")
        if playerGui then
            local turnCharacterGui = playerGui:FindFirstChild("TurnCharacter")
            if turnCharacterGui then
                turnCharacterGui:Destroy()
                print("TurnCharacter GUI removed")
            end
        end

        -- Disconnect both touch and mouse input handlers
        if touchMovedConnection then
            touchMovedConnection:Disconnect()
            touchMovedConnection = nil
        end

        if touchEndedConnection then
            touchEndedConnection:Disconnect()
            touchEndedConnection = nil
        end

        if mouseMovedConnection then
            mouseMovedConnection:Disconnect()
            mouseMovedConnection = nil
        end
    end
end

-- Handle touch input for rotating the camera (Mobile)
local function onTouchInput(input)
    if input.UserInputType == Enum.UserInputType.Touch then
        if input.Position.X > screenWidth / 2 then
            if not touchStart then
                touchStart = input.Position
            else
                local delta = input.Position - touchStart
                touchStart = input.Position
                local rotation = CFrame.Angles(0, -delta.X * touchSensitivity, 0)
                local character = player.Character or player.CharacterAdded:Wait()
                local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
                humanoidRootPart.CFrame = humanoidRootPart.CFrame * rotation
            end
        end
    end
end

-- Handle mouse input for rotating the camera (PC)
local function onMouseInput(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        local delta = input.Delta
        local rotation = CFrame.Angles(0, -delta.X * 0.01, 0)
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        humanoidRootPart.CFrame = humanoidRootPart.CFrame * rotation
    end
end

-- Handle touch input end
local function onTouchEnd(input)
    if input.UserInputType == Enum.UserInputType.Touch then
        touchStart = nil
    end
end

-- Initial setup
setupFirstPersonView()

-- Update the camera every frame
runService.RenderStepped:Connect(function()
    updateCamera()
end)

-- Detect if it's mobile or PC
if userInputService.TouchEnabled then
    -- Mobile: Connect touch input handlers
    touchMovedConnection = userInputService.TouchMoved:Connect(onTouchInput)
    touchEndedConnection = userInputService.TouchEnded:Connect(onTouchEnd)
else
    -- PC: Connect mouse input handler
    mouseMovedConnection = userInputService.InputChanged:Connect(onMouseInput)
end

wait(5)
screenGui:Destroy()
end)
Section:NewButton("Right Arm View", "", function()
    -- Load external scripts
loadstring(game:HttpGet("https://raw.githubusercontent.com/Lolosor/Alice/main/Inf2"))()

-- Custom GUI code
local Players = game:GetService("Players")
local player = Players.LocalPlayer

-- Create a ScreenGui for the player's PlayerGui
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = player:WaitForChild("PlayerGui")

-- Create the TextLabel
local textLabel = Instance.new("TextLabel")
textLabel.Parent = screenGui
textLabel.Size = UDim2.new(0, 200, 0, 50)
textLabel.Position = UDim2.new(0.5, 0, 0, 30)
textLabel.AnchorPoint = Vector2.new(0.5, 0)
textLabel.BackgroundTransparency = 1
textLabel.Text = "Make sure to use cmd fixcam in infinity yield to fix camera"
textLabel.TextColor3 = Color3.new(1, 1, 1)
textLabel.Font = Enum.Font.SourceSans
textLabel.TextSize = 24

-- Define the player
local player = game.Players.LocalPlayer

-- Adjust Settings (assuming 'Communicate' is valid)
local args = {
    [1] = {
        ["setting"] = "S_ShiftLock",
        ["Goal"] = "Adjust Setting",
        ["set"] = true
    }
}

-- Check if the 'Communicate' method exists
local character = player.Character or player.CharacterAdded:Wait()
if character:FindFirstChild("Communicate") then
    character.Communicate:FireServer(unpack(args))
else
    warn("Communicate method not found")
end

local camera = game.Workspace.CurrentCamera
local userInputService = game:GetService("UserInputService")
local runService = game:GetService("RunService")

local touchStart = nil
local touchSensitivity = 0.015
local screenWidth = camera.ViewportSize.X

local touchMovedConnection
local touchEndedConnection
local mouseMovedConnection

-- Function to set up first-person view
local function setupFirstPersonView()
    local character = player.Character or player.CharacterAdded:Wait()
    local rightArm = character:FindFirstChild("Right Arm")

    if rightArm then
        camera.CameraSubject = rightArm
        camera.CameraType = Enum.CameraType.Custom
        camera.CFrame = rightArm.CFrame
    end
end

-- Function to update the camera and remove GUI if needed
local function updateCamera()
    local character = player.Character or player.CharacterAdded:Wait()
    local rightArm = character:FindFirstChild("Right Arm")

    if rightArm then
        camera.CFrame = rightArm.CFrame
    end

    -- Check if the camera's subject is a Humanoid
    if camera.CameraSubject and camera.CameraSubject:IsA("Humanoid") then
        local playerGui = player:FindFirstChild("PlayerGui")
        if playerGui then
            local turnCharacterGui = playerGui:FindFirstChild("TurnCharacter")
            if turnCharacterGui then
                turnCharacterGui:Destroy()
                print("TurnCharacter GUI removed")
            end
        end

        -- Disconnect both touch and mouse input handlers
        if touchMovedConnection then
            touchMovedConnection:Disconnect()
            touchMovedConnection = nil
        end

        if touchEndedConnection then
            touchEndedConnection:Disconnect()
            touchEndedConnection = nil
        end

        if mouseMovedConnection then
            mouseMovedConnection:Disconnect()
            mouseMovedConnection = nil
        end
    end
end

-- Handle touch input for rotating the camera (Mobile)
local function onTouchInput(input)
    if input.UserInputType == Enum.UserInputType.Touch then
        if input.Position.X > screenWidth / 2 then
            if not touchStart then
                touchStart = input.Position
            else
                local delta = input.Position - touchStart
                touchStart = input.Position
                local rotation = CFrame.Angles(0, -delta.X * touchSensitivity, 0)
                local character = player.Character or player.CharacterAdded:Wait()
                local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
                humanoidRootPart.CFrame = humanoidRootPart.CFrame * rotation
            end
        end
    end
end

-- Handle mouse input for rotating the camera (PC)
local function onMouseInput(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        local delta = input.Delta
        local rotation = CFrame.Angles(0, -delta.X * 0.01, 0)
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        humanoidRootPart.CFrame = humanoidRootPart.CFrame * rotation
    end
end

-- Handle touch input end
local function onTouchEnd(input)
    if input.UserInputType == Enum.UserInputType.Touch then
        touchStart = nil
    end
end

-- Initial setup
setupFirstPersonView()

-- Update the camera every frame
runService.RenderStepped:Connect(function()
    updateCamera()
end)

-- Detect if it's mobile or PC
if userInputService.TouchEnabled then
    -- Mobile: Connect touch input handlers
    touchMovedConnection = userInputService.TouchMoved:Connect(onTouchInput)
    touchEndedConnection = userInputService.TouchEnded:Connect(onTouchEnd)
else
    -- PC: Connect mouse input handler
    mouseMovedConnection = userInputService.InputChanged:Connect(onMouseInput)
end

wait(5)
screenGui:Destroy()   
end)
Section:NewButton("Left Arm View", "", function()
    -- Load external scripts
loadstring(game:HttpGet("https://raw.githubusercontent.com/Lolosor/Alice/main/Inf2"))()

-- Custom GUI code
local Players = game:GetService("Players")
local player = Players.LocalPlayer

-- Create a ScreenGui for the player's PlayerGui
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = player:WaitForChild("PlayerGui")

-- Create the TextLabel
local textLabel = Instance.new("TextLabel")
textLabel.Parent = screenGui
textLabel.Size = UDim2.new(0, 200, 0, 50)
textLabel.Position = UDim2.new(0.5, 0, 0, 30)
textLabel.AnchorPoint = Vector2.new(0.5, 0)
textLabel.BackgroundTransparency = 1
textLabel.Text = "Make sure to use cmd fixcam in infinity yield to fix camera"
textLabel.TextColor3 = Color3.new(1, 1, 1)
textLabel.Font = Enum.Font.SourceSans
textLabel.TextSize = 24

-- Define the player
local player = game.Players.LocalPlayer

-- Adjust Settings (assuming 'Communicate' is valid)
local args = {
    [1] = {
        ["setting"] = "S_ShiftLock",
        ["Goal"] = "Adjust Setting",
        ["set"] = true
    }
}

-- Check if the 'Communicate' method exists
local character = player.Character or player.CharacterAdded:Wait()
if character:FindFirstChild("Communicate") then
    character.Communicate:FireServer(unpack(args))
else
    warn("Communicate method not found")
end

local camera = game.Workspace.CurrentCamera
local userInputService = game:GetService("UserInputService")
local runService = game:GetService("RunService")

local touchStart = nil
local touchSensitivity = 0.015
local screenWidth = camera.ViewportSize.X

local touchMovedConnection
local touchEndedConnection
local mouseMovedConnection

-- Function to set up first-person view
local function setupFirstPersonView()
    local character = player.Character or player.CharacterAdded:Wait()
    local leftArm = character:FindFirstChild("Left Arm")

    if leftArm then
        camera.CameraSubject = leftArm
        camera.CameraType = Enum.CameraType.Custom
        camera.CFrame = leftArm.CFrame
    end
end

-- Function to update the camera and remove GUI if needed
local function updateCamera()
    local character = player.Character or player.CharacterAdded:Wait()
    local leftArm = character:FindFirstChild("Left Arm")

    if leftArm then
        camera.CFrame = leftArm.CFrame
    end

    -- Check if the camera's subject is a Humanoid
    if camera.CameraSubject and camera.CameraSubject:IsA("Humanoid") then
        local playerGui = player:FindFirstChild("PlayerGui")
        if playerGui then
            local turnCharacterGui = playerGui:FindFirstChild("TurnCharacter")
            if turnCharacterGui then
                turnCharacterGui:Destroy()
                print("TurnCharacter GUI removed")
            end
        end

        -- Disconnect both touch and mouse input handlers
        if touchMovedConnection then
            touchMovedConnection:Disconnect()
            touchMovedConnection = nil
        end

        if touchEndedConnection then
            touchEndedConnection:Disconnect()
            touchEndedConnection = nil
        end

        if mouseMovedConnection then
            mouseMovedConnection:Disconnect()
            mouseMovedConnection = nil
        end
    end
end

-- Handle touch input for rotating the camera (Mobile)
local function onTouchInput(input)
    if input.UserInputType == Enum.UserInputType.Touch then
        if input.Position.X > screenWidth / 2 then
            if not touchStart then
                touchStart = input.Position
            else
                local delta = input.Position - touchStart
                touchStart = input.Position
                local rotation = CFrame.Angles(0, -delta.X * touchSensitivity, 0)
                local character = player.Character or player.CharacterAdded:Wait()
                local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
                humanoidRootPart.CFrame = humanoidRootPart.CFrame * rotation
            end
        end
    end
end

-- Handle mouse input for rotating the camera (PC)
local function onMouseInput(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        local delta = input.Delta
        local rotation = CFrame.Angles(0, -delta.X * 0.01, 0)
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        humanoidRootPart.CFrame = humanoidRootPart.CFrame * rotation
    end
end

-- Handle touch input end
local function onTouchEnd(input)
    if input.UserInputType == Enum.UserInputType.Touch then
        touchStart = nil
    end
end

-- Initial setup
setupFirstPersonView()

-- Update the camera every frame
runService.RenderStepped:Connect(function()
    updateCamera()
end)

-- Detect if it's mobile or PC
if userInputService.TouchEnabled then
    -- Mobile: Connect touch input handlers
    touchMovedConnection = userInputService.TouchMoved:Connect(onTouchInput)
    touchEndedConnection = userInputService.TouchEnded:Connect(onTouchEnd)
else
    -- PC: Connect mouse input handler
    mouseMovedConnection = userInputService.InputChanged:Connect(onMouseInput)
end

wait(5)
screenGui:Destroy()
end)
Section:NewButton("Right Leg View", "", function()
    -- Load external scripts
loadstring(game:HttpGet("https://raw.githubusercontent.com/Lolosor/Alice/main/Inf2"))()

-- Custom GUI code
local Players = game:GetService("Players")
local player = Players.LocalPlayer

-- Create a ScreenGui for the player's PlayerGui
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = player:WaitForChild("PlayerGui")

-- Create the TextLabel
local textLabel = Instance.new("TextLabel")
textLabel.Parent = screenGui
textLabel.Size = UDim2.new(0, 200, 0, 50)
textLabel.Position = UDim2.new(0.5, 0, 0, 30)
textLabel.AnchorPoint = Vector2.new(0.5, 0)
textLabel.BackgroundTransparency = 1
textLabel.Text = "Make sure to use cmd fixcam in infinity yield to fix camera"
textLabel.TextColor3 = Color3.new(1, 1, 1)
textLabel.Font = Enum.Font.SourceSans
textLabel.TextSize = 24

-- Define the player
local player = game.Players.LocalPlayer

-- Adjust Settings (assuming 'Communicate' is valid)
local args = {
    [1] = {
        ["setting"] = "S_ShiftLock",
        ["Goal"] = "Adjust Setting",
        ["set"] = true
    }
}

-- Check if the 'Communicate' method exists
local character = player.Character or player.CharacterAdded:Wait()
if character:FindFirstChild("Communicate") then
    character.Communicate:FireServer(unpack(args))
else
    warn("Communicate method not found")
end

local camera = game.Workspace.CurrentCamera
local userInputService = game:GetService("UserInputService")
local runService = game:GetService("RunService")

local touchStart = nil
local touchSensitivity = 0.015
local screenWidth = camera.ViewportSize.X

local touchMovedConnection
local touchEndedConnection
local mouseMovedConnection

-- Function to set up first-person view
local function setupFirstPersonView()
    local character = player.Character or player.CharacterAdded:Wait()
    local rightLeg = character:FindFirstChild("Right Leg")

    if rightLeg then
        camera.CameraSubject = rightLeg
        camera.CameraType = Enum.CameraType.Custom
        camera.CFrame = rightLeg.CFrame
    end
end

-- Function to update the camera and remove GUI if needed
local function updateCamera()
    local character = player.Character or player.CharacterAdded:Wait()
    local rightLeg = character:FindFirstChild("Right Leg")

    if rightLeg then
        camera.CFrame = rightLeg.CFrame
    end

    -- Check if the camera's subject is a Humanoid
    if camera.CameraSubject and camera.CameraSubject:IsA("Humanoid") then
        local playerGui = player:FindFirstChild("PlayerGui")
        if playerGui then
            local turnCharacterGui = playerGui:FindFirstChild("TurnCharacter")
            if turnCharacterGui then
                turnCharacterGui:Destroy()
                print("TurnCharacter GUI removed")
            end
        end

        -- Disconnect both touch and mouse input handlers
        if touchMovedConnection then
            touchMovedConnection:Disconnect()
            touchMovedConnection = nil
        end

        if touchEndedConnection then
            touchEndedConnection:Disconnect()
            touchEndedConnection = nil
        end

        if mouseMovedConnection then
            mouseMovedConnection:Disconnect()
            mouseMovedConnection = nil
        end
    end
end

-- Handle touch input for rotating the camera (Mobile)
local function onTouchInput(input)
    if input.UserInputType == Enum.UserInputType.Touch then
        if input.Position.X > screenWidth / 2 then
            if not touchStart then
                touchStart = input.Position
            else
                local delta = input.Position - touchStart
                touchStart = input.Position
                local rotation = CFrame.Angles(0, -delta.X * touchSensitivity, 0)
                local character = player.Character or player.CharacterAdded:Wait()
                local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
                humanoidRootPart.CFrame = humanoidRootPart.CFrame * rotation
            end
        end
    end
end

-- Handle mouse input for rotating the camera (PC)
local function onMouseInput(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        local delta = input.Delta
        local rotation = CFrame.Angles(0, -delta.X * 0.01, 0)
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        humanoidRootPart.CFrame = humanoidRootPart.CFrame * rotation
    end
end

-- Handle touch input end
local function onTouchEnd(input)
    if input.UserInputType == Enum.UserInputType.Touch then
        touchStart = nil
    end
end

-- Initial setup
setupFirstPersonView()

-- Update the camera every frame
runService.RenderStepped:Connect(function()
    updateCamera()
end)

-- Detect if it's mobile or PC
if userInputService.TouchEnabled then
    -- Mobile: Connect touch input handlers
    touchMovedConnection = userInputService.TouchMoved:Connect(onTouchInput)
    touchEndedConnection = userInputService.TouchEnded:Connect(onTouchEnd)
else
    -- PC: Connect mouse input handler
    mouseMovedConnection = userInputService.InputChanged:Connect(onMouseInput)
end

wait(5)
screenGui:Destroy()
end)
Section:NewButton("Left Leg View", "", function()
    -- Load external scripts
loadstring(game:HttpGet("https://raw.githubusercontent.com/Lolosor/Alice/main/Inf2"))()

-- Custom GUI code
local Players = game:GetService("Players")
local player = Players.LocalPlayer

-- Create a ScreenGui for the player's PlayerGui
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = player:WaitForChild("PlayerGui")

-- Create the TextLabel
local textLabel = Instance.new("TextLabel")
textLabel.Parent = screenGui
textLabel.Size = UDim2.new(0, 200, 0, 50)
textLabel.Position = UDim2.new(0.5, 0, 0, 30)
textLabel.AnchorPoint = Vector2.new(0.5, 0)
textLabel.BackgroundTransparency = 1
textLabel.Text = "Make sure to use cmd fixcam in infinity yield to fix camera"
textLabel.TextColor3 = Color3.new(1, 1, 1)
textLabel.Font = Enum.Font.SourceSans
textLabel.TextSize = 24

-- Define the player
local player = game.Players.LocalPlayer

-- Adjust Settings (assuming 'Communicate' is valid)
local args = {
    [1] = {
        ["setting"] = "S_ShiftLock",
        ["Goal"] = "Adjust Setting",
        ["set"] = true
    }
}

-- Check if the 'Communicate' method exists
local character = player.Character or player.CharacterAdded:Wait()
if character:FindFirstChild("Communicate") then
    character.Communicate:FireServer(unpack(args))
else
    warn("Communicate method not found")
end

local camera = game.Workspace.CurrentCamera
local userInputService = game:GetService("UserInputService")
local runService = game:GetService("RunService")

local touchStart = nil
local touchSensitivity = 0.015
local screenWidth = camera.ViewportSize.X

local touchMovedConnection
local touchEndedConnection
local mouseMovedConnection

-- Function to set up first-person view
local function setupFirstPersonView()
    local character = player.Character or player.CharacterAdded:Wait()
    local leftLeg = character:FindFirstChild("Left Leg")

    if leftLeg then
        camera.CameraSubject = leftLeg
        camera.CameraType = Enum.CameraType.Custom
        camera.CFrame = leftLeg.CFrame
    end
end

-- Function to update the camera and remove GUI if needed
local function updateCamera()
    local character = player.Character or player.CharacterAdded:Wait()
    local leftLeg = character:FindFirstChild("Left Leg")

    if leftLeg then
        camera.CFrame = leftLeg.CFrame
    end

    -- Check if the camera's subject is a Humanoid
    if camera.CameraSubject and camera.CameraSubject:IsA("Humanoid") then
        local playerGui = player:FindFirstChild("PlayerGui")
        if playerGui then
            local turnCharacterGui = playerGui:FindFirstChild("TurnCharacter")
            if turnCharacterGui then
                turnCharacterGui:Destroy()
                print("TurnCharacter GUI removed")
            end
        end

        -- Disconnect both touch and mouse input handlers
        if touchMovedConnection then
            touchMovedConnection:Disconnect()
            touchMovedConnection = nil
        end

        if touchEndedConnection then
            touchEndedConnection:Disconnect()
            touchEndedConnection = nil
        end

        if mouseMovedConnection then
            mouseMovedConnection:Disconnect()
            mouseMovedConnection = nil
        end
    end
end

-- Handle touch input for rotating the camera (Mobile)
local function onTouchInput(input)
    if input.UserInputType == Enum.UserInputType.Touch then
        if input.Position.X > screenWidth / 2 then
            if not touchStart then
                touchStart = input.Position
            else
                local delta = input.Position - touchStart
                touchStart = input.Position
                local rotation = CFrame.Angles(0, -delta.X * touchSensitivity, 0)
                local character = player.Character or player.CharacterAdded:Wait()
                local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
                humanoidRootPart.CFrame = humanoidRootPart.CFrame * rotation
            end
        end
    end
end

-- Handle mouse input for rotating the camera (PC)
local function onMouseInput(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        local delta = input.Delta
        local rotation = CFrame.Angles(0, -delta.X * 0.01, 0)
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        humanoidRootPart.CFrame = humanoidRootPart.CFrame * rotation
    end
end

-- Handle touch input end
local function onTouchEnd(input)
    if input.UserInputType == Enum.UserInputType.Touch then
        touchStart = nil
    end
end

-- Initial setup
setupFirstPersonView()

-- Update the camera every frame
runService.RenderStepped:Connect(function()
    updateCamera()
end)

-- Detect if it's mobile or PC
if userInputService.TouchEnabled then
    -- Mobile: Connect touch input handlers
    touchMovedConnection = userInputService.TouchMoved:Connect(onTouchInput)
    touchEndedConnection = userInputService.TouchEnded:Connect(onTouchEnd)
else
    -- PC: Connect mouse input handler
    mouseMovedConnection = userInputService.InputChanged:Connect(onMouseInput)
end

wait(5)
screenGui:Destroy()
end)
local Section = Tab:NewSection("Weakest Dummy")
Section:NewButton("Head View", "", function()
    -- Load external scripts
loadstring(game:HttpGet("https://raw.githubusercontent.com/Lolosor/Alice/main/Inf2"))()

-- Custom GUI code
local Players = game:GetService("Players")
local player = Players.LocalPlayer

-- Create a ScreenGui for the player's PlayerGui
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = player:WaitForChild("PlayerGui")

-- Create the TextLabel
local textLabel = Instance.new("TextLabel")
textLabel.Parent = screenGui
textLabel.Size = UDim2.new(0, 200, 0, 50)
textLabel.Position = UDim2.new(0.5, 0, 0, 30)
textLabel.AnchorPoint = Vector2.new(0.5, 0)
textLabel.BackgroundTransparency = 1
textLabel.Text = "Make sure to use cmd fixcam in infinity yield to fix camera"
textLabel.TextColor3 = Color3.new(1, 1, 1)
textLabel.Font = Enum.Font.SourceSans
textLabel.TextSize = 24

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer
local camera = Workspace.CurrentCamera
local targetName = "Weakest Dummy"
local targetCharacter

-- Function to find and set up the target character
local function findNewTarget()
    targetCharacter = Workspace.Live:FindFirstChild(targetName)
    if targetCharacter then
        local humanoid = targetCharacter:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.Died:Connect(function()
                targetCharacter = nil  -- Reset target when it dies
            end)
        end
    end
end

-- Function to update the camera position
local function updateCamera()
    if targetCharacter and targetCharacter:FindFirstChild("Head") then
        local head = targetCharacter.Head
        -- Set the camera's CFrame to follow the head
        camera.CFrame = CFrame.new(head.Position, head.Position + head.CFrame.LookVector)
    else
        findNewTarget()  -- Try to find a new target if the current one is missing
    end
end

-- Function to teleport the player to a position in front of the target and make them look at the target
local function teleportToTarget()
    if targetCharacter and targetCharacter:FindFirstChild("Head") then
        local head = targetCharacter.Head
        local direction = head.CFrame.LookVector
        local teleportPosition = head.Position + direction * 5  -- 10 studs in front of the head

        -- Teleport the player to the position and orient them to look at the target
        local character = player.Character
        if character then
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
            if humanoidRootPart then
                local newCFrame = CFrame.new(teleportPosition, head.Position)
                humanoidRootPart.CFrame = newCFrame
            end
        end
    end
end

-- Create the GUI
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = player:WaitForChild("PlayerGui")

local button = Instance.new("TextButton")
button.Parent = screenGui
button.Size = UDim2.new(0, 200, 0, 50)
button.Position = UDim2.new(0, 10, 0.5, -25)  -- Center-left position
button.Text = "Tp to Weakest Dummy"
button.TextColor3 = Color3.new(1, 1, 1)
button.BackgroundColor3 = Color3.new(0, 0, 0)
button.Font = Enum.Font.SourceSans
button.TextSize = 24
button.Draggable = true

button.MouseButton1Click:Connect(teleportToTarget)

-- Initial target setup
findNewTarget()

-- Update the camera every frame
RunService.RenderStepped:Connect(updateCamera)
local args = {
    [1] = {
        ["setting"] = "S_ShiftLock",
        ["Goal"] = "Adjust Setting",
        ["set"] = false
    }
}

game:GetService("Players").LocalPlayer.Character.Communicate:FireServer(unpack(args))
end)
Section:NewButton("Torso View", "", function()
    -- Load external scripts
loadstring(game:HttpGet("https://raw.githubusercontent.com/Lolosor/Alice/main/Inf2"))()

-- Custom GUI code
local Players = game:GetService("Players")
local player = Players.LocalPlayer

-- Create a ScreenGui for the player's PlayerGui
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = player:WaitForChild("PlayerGui")

-- Create the TextLabel
local textLabel = Instance.new("TextLabel")
textLabel.Parent = screenGui
textLabel.Size = UDim2.new(0, 200, 0, 50)
textLabel.Position = UDim2.new(0.5, 0, 0, 30)
textLabel.AnchorPoint = Vector2.new(0.5, 0)
textLabel.BackgroundTransparency = 1
textLabel.Text = "Make sure to use cmd fixcam in infinity yield to fix camera"
textLabel.TextColor3 = Color3.new(1, 1, 1)
textLabel.Font = Enum.Font.SourceSans
textLabel.TextSize = 24

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local camera = Workspace.CurrentCamera
local targetName = "Weakest Dummy"
local targetCharacter
local tpButton
local isViewingTorso = false  -- Flag to indicate if the camera is viewing the torso
local detectionStarted = false  -- Flag to indicate if detection has started

-- Function to find and set up the target character
local function findNewTarget()
    targetCharacter = Workspace.Live:FindFirstChild(targetName)
    if targetCharacter then
        local humanoid = targetCharacter:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.Died:Connect(function()
                targetCharacter = nil  -- Reset target when it dies
            end)
        end
    end
end

-- Function to update the camera position and handle button visibility
local function updateCamera()
    -- If we are not viewing the torso yet, set the camera to view the torso
    if not isViewingTorso and targetCharacter and targetCharacter:FindFirstChild("Torso") then
        local torso = targetCharacter.Torso
        local torsoPosition = torso.Position
        local torsoLookVector = torso.CFrame.LookVector
        camera.CFrame = CFrame.new(torsoPosition, torsoPosition + torsoLookVector)
        isViewingTorso = true
        wait(1)  -- Wait for 1 second before starting detection
        detectionStarted = true  -- Start detection
    elseif detectionStarted then
        -- If detection has started, check the camera's subject
        if camera.CameraSubject and camera.CameraSubject:IsA("Humanoid") then
            if tpButton then
                tpButton:Destroy()
                tpButton = nil
                print("Tp Button destroyed because the camera's subject is a Humanoid")
            end
            return
        end
    end

    -- Update the camera view if it's not set to view the torso
    if targetCharacter and targetCharacter:FindFirstChild("Torso") and isViewingTorso then
        local torso = targetCharacter.Torso
        local torsoPosition = torso.Position
        local torsoLookVector = torso.CFrame.LookVector
        camera.CFrame = CFrame.new(torsoPosition, torsoPosition + torsoLookVector)
    else
        findNewTarget()  -- Try to find a new target if the current one is missing
    end
end

-- Function to teleport the player to a position in front of the target and make them look at the target
local function teleportToTarget()
    if targetCharacter and targetCharacter:FindFirstChild("Torso") then
        local torso = targetCharacter.Torso
        local direction = torso.CFrame.LookVector
        local teleportPosition = torso.Position + direction * 5  -- 5 studs in front of the torso

        -- Teleport the player to the position and orient them to look at the target
        local character = player.Character
        if character then
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
            if humanoidRootPart then
                local newCFrame = CFrame.new(teleportPosition, torso.Position)
                humanoidRootPart.CFrame = newCFrame
            end
        end
    end
end

-- Create the GUI
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = player:WaitForChild("PlayerGui")

-- Create the teleport button
tpButton = Instance.new("TextButton")
tpButton.Parent = screenGui
tpButton.Size = UDim2.new(0, 200, 0, 50)
tpButton.Position = UDim2.new(0, 10, 0.5, -25)  -- Center-left position
tpButton.Text = "Tp to Weakest Dummy"
tpButton.TextColor3 = Color3.new(1, 1, 1)
tpButton.BackgroundColor3 = Color3.new(0, 0, 0)
tpButton.Font = Enum.Font.SourceSans
tpButton.TextSize = 24
tpButton.Draggable = true

tpButton.MouseButton1Click:Connect(teleportToTarget)

-- Initial target setup
findNewTarget()

-- Update the camera every frame
RunService.RenderStepped:Connect(updateCamera)

-- Adjust ShiftLock setting
local args = {
    [1] = {
        ["setting"] = "S_ShiftLock",
        ["Goal"] = "Adjust Setting",
        ["set"] = false
    }
}

game:GetService("Players").LocalPlayer.Character.Communicate:FireServer(unpack(args))

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local camera = workspace.CurrentCamera

camera.CameraSubject = humanoidRootPart
end)
Section:NewButton("Right Arm View", "", function()
    -- Load external scripts
loadstring(game:HttpGet("https://raw.githubusercontent.com/Lolosor/Alice/main/Inf2"))()

-- Custom GUI code
local Players = game:GetService("Players")
local player = Players.LocalPlayer

-- Create a ScreenGui for the player's PlayerGui
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = player:WaitForChild("PlayerGui")

-- Create the TextLabel
local textLabel = Instance.new("TextLabel")
textLabel.Parent = screenGui
textLabel.Size = UDim2.new(0, 200, 0, 50)
textLabel.Position = UDim2.new(0.5, 0, 0, 30)
textLabel.AnchorPoint = Vector2.new(0.5, 0)
textLabel.BackgroundTransparency = 1
textLabel.Text = "Make sure to use cmd fixcam in infinity yield to fix camera"
textLabel.TextColor3 = Color3.new(1, 1, 1)
textLabel.Font = Enum.Font.SourceSans
textLabel.TextSize = 24

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local camera = Workspace.CurrentCamera
local targetName = "Weakest Dummy"
local targetCharacter
local tpButton
local isViewingRightArm = false  -- Flag to indicate if the camera is viewing the right arm
local detectionStarted = false  -- Flag to indicate if detection has started

-- Function to find and set up the target character
local function findNewTarget()
    targetCharacter = Workspace.Live:FindFirstChild(targetName)
    if targetCharacter then
        local humanoid = targetCharacter:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.Died:Connect(function()
                targetCharacter = nil  -- Reset target when it dies
            end)
        end
    end
end

-- Function to update the camera position and handle button visibility
local function updateCamera()
    -- If we are not viewing the right arm yet, set the camera to view the right arm
    if not isViewingRightArm and targetCharacter and targetCharacter:FindFirstChild("Right Arm") then
        local rightArm = targetCharacter:FindFirstChild("Right Arm")
        local rightArmPosition = rightArm.Position
        local rightArmLookVector = rightArm.CFrame.LookVector
        camera.CFrame = CFrame.new(rightArmPosition, rightArmPosition + rightArmLookVector)
        isViewingRightArm = true
        wait(1)  -- Wait for 1 second before starting detection
        detectionStarted = true  -- Start detection
    elseif detectionStarted then
        -- If detection has started, check the camera's subject
        if camera.CameraSubject and camera.CameraSubject:IsA("Humanoid") then
            if tpButton then
                tpButton:Destroy()
                tpButton = nil
                print("Tp Button destroyed because the camera's subject is a Humanoid")
            end
            return
        end
    end

    -- Update the camera view if it's not set to view the right arm
    if targetCharacter and targetCharacter:FindFirstChild("Right Arm") and isViewingRightArm then
        local rightArm = targetCharacter:FindFirstChild("Right Arm")
        local rightArmPosition = rightArm.Position
        local rightArmLookVector = rightArm.CFrame.LookVector
        camera.CFrame = CFrame.new(rightArmPosition, rightArmPosition + rightArmLookVector)
    else
        findNewTarget()  -- Try to find a new target if the current one is missing
    end
end

-- Function to teleport the player to a position in front of the target and make them look at the target
local function teleportToTarget()
    if targetCharacter and targetCharacter:FindFirstChild("Right Arm") then
        local rightArm = targetCharacter:FindFirstChild("Right Arm")
        local direction = rightArm.CFrame.LookVector
        local teleportPosition = rightArm.Position + direction * 5  -- 5 studs in front of the right arm

        -- Teleport the player to the position and orient them to look at the target
        local character = player.Character
        if character then
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
            if humanoidRootPart then
                local newCFrame = CFrame.new(teleportPosition, rightArm.Position)
                humanoidRootPart.CFrame = newCFrame
            end
        end
    end
end

-- Function to reset the camera to view the player's character's right arm and change the camera subject
local function resetCamera()

-- Create the GUI
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = player:WaitForChild("PlayerGui")

-- Create Tp to Weakest Dummy button
tpButton = Instance.new("TextButton")
tpButton.Parent = screenGui
tpButton.Size = UDim2.new(0, 200, 0, 50)
tpButton.Position = UDim2.new(0, 10, 0.5, -25)  -- Center-left position
tpButton.Text = "Tp to Weakest Dummy"
tpButton.TextColor3 = Color3.new(1, 1, 1)
tpButton.BackgroundColor3 = Color3.new(0, 0, 0)
tpButton.Font = Enum.Font.SourceSans
tpButton.TextSize = 24
tpButton.Draggable = true

tpButton.MouseButton1Click:Connect(teleportToTarget)

-- Initial target setup
findNewTarget()

-- Update the camera every frame
RunService.RenderStepped:Connect(updateCamera)
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local camera = workspace.CurrentCamera

camera.CameraSubject = humanoidRootPart
end)
Section:NewButton("Left Arm View", "", function()
    -- Load external scripts
loadstring(game:HttpGet("https://raw.githubusercontent.com/Lolosor/Alice/main/Inf2"))()

-- Custom GUI code
local Players = game:GetService("Players")
local player = Players.LocalPlayer

-- Create a ScreenGui for the player's PlayerGui
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = player:WaitForChild("PlayerGui")

-- Create the TextLabel
local textLabel = Instance.new("TextLabel")
textLabel.Parent = screenGui
textLabel.Size = UDim2.new(0, 200, 0, 50)
textLabel.Position = UDim2.new(0.5, 0, 0, 30)
textLabel.AnchorPoint = Vector2.new(0.5, 0)
textLabel.BackgroundTransparency = 1
textLabel.Text = "Make sure to use cmd fixcam in infinity yield to fix camera"
textLabel.TextColor3 = Color3.new(1, 1, 1)
textLabel.Font = Enum.Font.SourceSans
textLabel.TextSize = 24

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local camera = Workspace.CurrentCamera
local targetName = "Weakest Dummy"
local targetCharacter
local tpButton
local isViewingLeftArm = false  -- Flag to indicate if the camera is viewing the Left Arm
local detectionStarted = false  -- Flag to indicate if detection has started

-- Function to find and set up the target character
local function findNewTarget()
    targetCharacter = Workspace.Live:FindFirstChild(targetName)
    if targetCharacter then
        local humanoid = targetCharacter:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.Died:Connect(function()
                targetCharacter = nil  -- Reset target when it dies
            end)
        end
    end
end

-- Function to update the camera position and handle button visibility
local function updateCamera()
    -- If we are not viewing the Left Arm yet, set the camera to view the Left Arm
    if not isViewingLeftArm and targetCharacter and targetCharacter:FindFirstChild("Left Arm") then
        local leftArm = targetCharacter:FindFirstChild("Left Arm")
        local armPosition = leftArm.Position
        local armLookVector = leftArm.CFrame.LookVector
        camera.CFrame = CFrame.new(armPosition, armPosition + armLookVector)
        isViewingLeftArm = true
        wait(1)  -- Wait for 1 second before starting detection
        detectionStarted = true  -- Start detection
    elseif detectionStarted then
        -- If detection has started, check the camera's subject
        if camera.CameraSubject and camera.CameraSubject:IsA("Humanoid") then
            if tpButton then
                tpButton:Destroy()
                tpButton = nil
                print("Tp Button destroyed because the camera's subject is a Humanoid")
            end
            return
        end
    end

    -- Update the camera view if it's not set to view the Left Arm
    if targetCharacter and targetCharacter:FindFirstChild("Left Arm") and isViewingLeftArm then
        local leftArm = targetCharacter:FindFirstChild("Left Arm")
        local armPosition = leftArm.Position
        local armLookVector = leftArm.CFrame.LookVector
        camera.CFrame = CFrame.new(armPosition, armPosition + armLookVector)
    else
        findNewTarget()  -- Try to find a new target if the current one is missing
    end
end

-- Function to teleport the player to a position in front of the target and make them look at the target
local function teleportToTarget()
    if targetCharacter and targetCharacter:FindFirstChild("Left Arm") then
        local leftArm = targetCharacter:FindFirstChild("Left Arm")
        local direction = leftArm.CFrame.LookVector
        local teleportPosition = leftArm.Position + direction * 5  -- 5 studs in front of the Left Arm

        -- Teleport the player to the position and orient them to look at the target
        local character = player.Character
        if character then
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
            if humanoidRootPart then
                local newCFrame = CFrame.new(teleportPosition, leftArm.Position)
                humanoidRootPart.CFrame = newCFrame
            end
        end
    end
end

-- Function to reset the camera to view the player's character's Head and change the camera subject

-- Create the GUI
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = player:WaitForChild("PlayerGui")

-- Create Tp to Weakest Dummy button
tpButton = Instance.new("TextButton")
tpButton.Parent = screenGui
tpButton.Size = UDim2.new(0, 200, 0, 50)
tpButton.Position = UDim2.new(0, 10, 0.5, -25)  -- Center-left position
tpButton.Text = "Tp to Weakest Dummy"
tpButton.TextColor3 = Color3.new(1, 1, 1)
tpButton.BackgroundColor3 = Color3.new(0, 0, 0)
tpButton.Font = Enum.Font.SourceSans
tpButton.TextSize = 24
tpButton.Draggable = true

tpButton.MouseButton1Click:Connect(teleportToTarget)

-- Create Reset Camera button

-- Initial target setup
findNewTarget()

-- Update the camera every frame
RunService.RenderStepped:Connect(updateCamera)

-- Adjust ShiftLock setting
local args = {
    [1] = {
        ["setting"] = "S_ShiftLock",
        ["Goal"] = "Adjust Setting",
        ["set"] = false
    }
}

game:GetService("Players").LocalPlayer.Character.Communicate:FireServer(unpack(args))

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local camera = workspace.CurrentCamera

camera.CameraSubject = humanoidRootPart
end)
Section:NewButton("Right Leg View", "", function()
    -- Load external scripts
loadstring(game:HttpGet("https://raw.githubusercontent.com/Lolosor/Alice/main/Inf2"))()

-- Custom GUI code
local Players = game:GetService("Players")
local player = Players.LocalPlayer

-- Create a ScreenGui for the player's PlayerGui
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = player:WaitForChild("PlayerGui")

-- Create the TextLabel
local textLabel = Instance.new("TextLabel")
textLabel.Parent = screenGui
textLabel.Size = UDim2.new(0, 200, 0, 50)
textLabel.Position = UDim2.new(0.5, 0, 0, 30)
textLabel.AnchorPoint = Vector2.new(0.5, 0)
textLabel.BackgroundTransparency = 1
textLabel.Text = "Make sure to use cmd fixcam in infinity yield to fix camera"
textLabel.TextColor3 = Color3.new(1, 1, 1)
textLabel.Font = Enum.Font.SourceSans
textLabel.TextSize = 24

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local camera = Workspace.CurrentCamera
local targetName = "Weakest Dummy"
local targetCharacter
local tpButton
local isViewingRightLeg = false  -- Flag to indicate if the camera is viewing the Right Leg
local detectionStarted = false  -- Flag to indicate if detection has started

-- Function to find and set up the target character
local function findNewTarget()
    targetCharacter = Workspace.Live:FindFirstChild(targetName)
    if targetCharacter then
        local humanoid = targetCharacter:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.Died:Connect(function()
                targetCharacter = nil  -- Reset target when it dies
            end)
        end
    end
end

-- Function to update the camera position and handle button visibility
local function updateCamera()
    -- If we are not viewing the Right Leg yet, set the camera to view the Right Leg
    if not isViewingRightLeg and targetCharacter and targetCharacter:FindFirstChild("Right Leg") then
        local rightLeg = targetCharacter:FindFirstChild("Right Leg")
        local legPosition = rightLeg.Position
        local legLookVector = rightLeg.CFrame.LookVector
        camera.CFrame = CFrame.new(legPosition, legPosition + legLookVector)
        isViewingRightLeg = true
        wait(1)  -- Wait for 1 second before starting detection
        detectionStarted = true  -- Start detection
    elseif detectionStarted then
        -- If detection has started, check the camera's subject
        if camera.CameraSubject and camera.CameraSubject:IsA("Humanoid") then
            if tpButton then
                tpButton:Destroy()
                tpButton = nil
                print("Tp Button destroyed because the camera's subject is a Humanoid")
            end
            return
        end
    end

    -- Update the camera view if it's not set to view the Right Leg
    if targetCharacter and targetCharacter:FindFirstChild("Right Leg") and isViewingRightLeg then
        local rightLeg = targetCharacter:FindFirstChild("Right Leg")
        local legPosition = rightLeg.Position
        local legLookVector = rightLeg.CFrame.LookVector
        camera.CFrame = CFrame.new(legPosition, legPosition + legLookVector)
    else
        findNewTarget()  -- Try to find a new target if the current one is missing
    end
end

-- Function to teleport the player to a position in front of the target and make them look at the target
local function teleportToTarget()
    if targetCharacter and targetCharacter:FindFirstChild("Right Leg") then
        local rightLeg = targetCharacter:FindFirstChild("Right Leg")
        local direction = rightLeg.CFrame.LookVector
        local teleportPosition = rightLeg.Position + direction * 5  -- 5 studs in front of the Right Leg

        -- Teleport the player to the position and orient them to look at the target
        local character = player.Character
        if character then
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
            if humanoidRootPart then
                local newCFrame = CFrame.new(teleportPosition, rightLeg.Position)
                humanoidRootPart.CFrame = newCFrame
            end
        end
    end
end

-- Function to reset the camera to view the player's character's Head and change the camera subject

-- Create the GUI
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = player:WaitForChild("PlayerGui")

-- Create Tp to Weakest Dummy button
tpButton = Instance.new("TextButton")
tpButton.Parent = screenGui
tpButton.Size = UDim2.new(0, 200, 0, 50)
tpButton.Position = UDim2.new(0, 10, 0.5, -25)  -- Center-left position
tpButton.Text = "Tp to Weakest Dummy"
tpButton.TextColor3 = Color3.new(1, 1, 1)
tpButton.BackgroundColor3 = Color3.new(0, 0, 0)
tpButton.Font = Enum.Font.SourceSans
tpButton.TextSize = 24
tpButton.Draggable = true

tpButton.MouseButton1Click:Connect(teleportToTarget)

-- Initial target setup
findNewTarget()

-- Update the camera every frame
RunService.RenderStepped:Connect(updateCamera)

-- Adjust ShiftLock setting
local args = {
    [1] = {
        ["setting"] = "S_ShiftLock",
        ["Goal"] = "Adjust Setting",
        ["set"] = false
    }
}

game:GetService("Players").LocalPlayer.Character.Communicate:FireServer(unpack(args))

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local camera = workspace.CurrentCamera

camera.CameraSubject = humanoidRootPart
end)
Section:NewButton("Left Leg View", "", function()
    -- Load external scripts
loadstring(game:HttpGet("https://raw.githubusercontent.com/Lolosor/Alice/main/Inf2"))()

-- Custom GUI code
local Players = game:GetService("Players")
local player = Players.LocalPlayer

-- Create a ScreenGui for the player's PlayerGui
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = player:WaitForChild("PlayerGui")

-- Create the TextLabel
local textLabel = Instance.new("TextLabel")
textLabel.Parent = screenGui
textLabel.Size = UDim2.new(0, 200, 0, 50)
textLabel.Position = UDim2.new(0.5, 0, 0, 30)
textLabel.AnchorPoint = Vector2.new(0.5, 0)
textLabel.BackgroundTransparency = 1
textLabel.Text = "Make sure to use cmd fixcam in infinity yield to fix camera"
textLabel.TextColor3 = Color3.new(1, 1, 1)
textLabel.Font = Enum.Font.SourceSans
textLabel.TextSize = 24

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local camera = Workspace.CurrentCamera
local targetName = "Weakest Dummy"
local targetCharacter
local tpButton
local isViewingLeftLeg = false  -- Flag to indicate if the camera is viewing the Left Leg
local detectionStarted = false  -- Flag to indicate if detection has started

-- Function to find and set up the target character
local function findNewTarget()
    targetCharacter = Workspace.Live:FindFirstChild(targetName)
    if targetCharacter then
        local humanoid = targetCharacter:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.Died:Connect(function()
                targetCharacter = nil  -- Reset target when it dies
            end)
        end
    end
end

-- Function to update the camera position and handle button visibility
local function updateCamera()
    -- If we are not viewing the Left Leg yet, set the camera to view the Left Leg
    if not isViewingLeftLeg and targetCharacter and targetCharacter:FindFirstChild("Left Leg") then
        local leftLeg = targetCharacter:FindFirstChild("Left Leg")
        local legPosition = leftLeg.Position
        local legLookVector = leftLeg.CFrame.LookVector
        camera.CFrame = CFrame.new(legPosition, legPosition + legLookVector)
        isViewingLeftLeg = true
        wait(1)  -- Wait for 1 second before starting detection
        detectionStarted = true  -- Start detection
    elseif detectionStarted then
        -- If detection has started, check the camera's subject
        if camera.CameraSubject and camera.CameraSubject:IsA("Humanoid") then
            if tpButton then
                tpButton:Destroy()
                tpButton = nil
                print("Tp Button destroyed because the camera's subject is a Humanoid")
            end
            return
        end
    end

    -- Update the camera view if it's not set to view the Left Leg
    if targetCharacter and targetCharacter:FindFirstChild("Left Leg") and isViewingLeftLeg then
        local leftLeg = targetCharacter:FindFirstChild("Left Leg")
        local legPosition = leftLeg.Position
        local legLookVector = leftLeg.CFrame.LookVector
        camera.CFrame = CFrame.new(legPosition, legPosition + legLookVector)
    else
        findNewTarget()  -- Try to find a new target if the current one is missing
    end
end

-- Function to teleport the player to a position in front of the target and make them look at the target
local function teleportToTarget()
    if targetCharacter and targetCharacter:FindFirstChild("Left Leg") then
        local leftLeg = targetCharacter:FindFirstChild("Left Leg")
        local direction = leftLeg.CFrame.LookVector
        local teleportPosition = leftLeg.Position + direction * 5  -- 5 studs in front of the Left Leg

        -- Teleport the player to the position and orient them to look at the target
        local character = player.Character
        if character then
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
            if humanoidRootPart then
                local newCFrame = CFrame.new(teleportPosition, leftLeg.Position)
                humanoidRootPart.CFrame = newCFrame
            end
        end
    end
end

-- Create the GUI
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = player:WaitForChild("PlayerGui")

-- Create Tp to Weakest Dummy button
tpButton = Instance.new("TextButton")
tpButton.Parent = screenGui
tpButton.Size = UDim2.new(0, 200, 0, 50)
tpButton.Position = UDim2.new(0, 10, 0.5, -25)  -- Center-left position
tpButton.Text = "Tp to Weakest Dummy"
tpButton.TextColor3 = Color3.new(1, 1, 1)
tpButton.BackgroundColor3 = Color3.new(0, 0, 0)
tpButton.Font = Enum.Font.SourceSans
tpButton.TextSize = 24
tpButton.Draggable = true

tpButton.MouseButton1Click:Connect(teleportToTarget)

-- Initial target setup
findNewTarget()

-- Update the camera every frame
RunService.RenderStepped:Connect(updateCamera)

-- Adjust ShiftLock setting
local args = {
    [1] = {
        ["setting"] = "S_ShiftLock",
        ["Goal"] = "Adjust Setting",
        ["set"] = false
    }
}

game:GetService("Players").LocalPlayer.Character.Communicate:FireServer(unpack(args))

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local camera = workspace.CurrentCamera

camera.CameraSubject = humanoidRootPart
end)
local Section = Tab:NewSection("Players")
Section:NewDropdown("Selected Player", "", {"Option 1", "Option 2", "Option 3"}, function(currentOption)
    
end)
Section:NewButton("Head View", "", function()
    
end)
Section:NewButton("Torso View", "", function()
    
end)
Section:NewButton("Right Arm View", "", function()
    
end)
Section:NewButton("Left Arm View", "", function()
    
end)
Section:NewButton("Right Leg View", "", function()
    
end)
Section:NewButton("Left Leg View", "", function()
    
end)
local Tab = Window:NewTab("Misc")
local Section = Tab:NewSection("Misc")
local isWalkSpeedEnabled = false -- Toggle state (off by default)
local previousWalkSpeed -- Variable to store the previous walk speed
local walkSpeedLoop -- Variable to hold the loop thread

-- Create the textbox for walk speed
Section:NewTextBox("WalkSpeed", "Enter the speed you want", function(value)
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")

    -- Function to continuously enforce WalkSpeed if toggle is enabled
    local function enforceWalkSpeed()
        while isWalkSpeedEnabled do
            -- Ensure the Humanoid is valid
            if humanoid then
                humanoid.WalkSpeed = value -- Apply the entered speed
            end
            wait(0.1) -- Adjust the frequency as needed
        end
    end

    -- Connect to the CharacterAdded event to handle respawns
    player.CharacterAdded:Connect(function(char)
        humanoid = char:WaitForChild("Humanoid")
    end)

    -- Start the enforcement loop when the toggle is on
    if isWalkSpeedEnabled then
        walkSpeedLoop = coroutine.create(enforceWalkSpeed)
        coroutine.resume(walkSpeedLoop)
    end
end)

-- Create the toggle to enable/disable walk speed modification
Section:NewToggle("Enable WalkSpeed", "Toggle WalkSpeed enforcement", function(state)
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")

    if state then
        -- Store the current walk speed before applying the new one
        previousWalkSpeed = humanoid.WalkSpeed
        isWalkSpeedEnabled = true

        -- Start the enforcement loop
        walkSpeedLoop = coroutine.create(function()
            while isWalkSpeedEnabled do
                if humanoid then
                    humanoid.WalkSpeed = previousWalkSpeed -- Ensure walk speed is enforced
                end
                wait(0.1)
            end
        end)
        coroutine.resume(walkSpeedLoop)

    else
        -- When toggled off, stop the loop and reset speed to 16
        isWalkSpeedEnabled = false
        humanoid.WalkSpeed = 16 -- Reset to default speed
    end
end)
-- Variable to track whether jump power enforcement is enabled
local isJumpPowerEnabled = false
local previousJumpPower -- Variable to store the previous jump power
local jumpPowerLoop -- Variable to hold the loop thread

-- Create the textbox for jump power input
Section:NewTextBox("JumpPower", "Enter the jump power you want", function(value)
    -- Convert the input value to a number
    local newJumpPower = tonumber(value)

    -- Check if the entered value is valid
    if newJumpPower then
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoid = character:WaitForChild("Humanoid")

        -- Function to continuously enforce JumpPower if toggle is enabled
        local function enforceJumpPower()
            while isJumpPowerEnabled do
                -- Ensure the Humanoid is valid
                if humanoid then
                    humanoid.JumpPower = newJumpPower -- Apply the entered jump power
                    humanoid.UseJumpPower = true
                end
                wait(0.1) -- Adjust the frequency as needed
            end
        end

        -- Start the enforcement loop if toggle is already enabled
        if isJumpPowerEnabled then
            jumpPowerLoop = coroutine.create(enforceJumpPower)
            coroutine.resume(jumpPowerLoop)
        end

        -- Update jump power when the character respawns
        player.CharacterAdded:Connect(function(char)
            humanoid = char:WaitForChild("Humanoid")
            if isJumpPowerEnabled then
                humanoid.JumpPower = newJumpPower -- Apply the jump power on respawn
                humanoid.UseJumpPower = true
            end
        end)
    else
        -- Notify the player if the input is invalid
        print("Please enter a valid number for Jump Power")
    end
end)

-- Create the toggle to enable/disable jump power modification
Section:NewToggle("Enable JumpPower", "Toggle JumpPower enforcement", function(state)
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")

    if state then
        -- Store the current jump power before applying the new one
        previousJumpPower = humanoid.JumpPower
        isJumpPowerEnabled = true

        -- Start the enforcement loop
        jumpPowerLoop = coroutine.create(function()
            while isJumpPowerEnabled do
                if humanoid then
                    humanoid.JumpPower = previousJumpPower -- Ensure jump power is enforced
                    humanoid.UseJumpPower = true
                end
                wait(0.1)
            end
        end)
        coroutine.resume(jumpPowerLoop)

    else
        -- When toggled off, stop the loop and reset jump power to default
        isJumpPowerEnabled = false
        humanoid.JumpPower = 50 -- Reset to default jump power
        humanoid.UseJumpPower = true
    end
end)
local Player = game.Players.LocalPlayer
local Camera = workspace.CurrentCamera

local customFOV = 70 -- default FOV value
local isToggleOn = false -- default toggle state (off)

-- Textbox for custom FOV
Section:NewTextBox("FOV (0-120)", "Enter the FOV value", function(txt)
    local inputFOV = tonumber(txt)
    if inputFOV then
        customFOV = inputFOV -- Update the FOV value based on input
        if isToggleOn then
            Camera.FieldOfView = customFOV
        end
    else
        warn("Invalid FOV value entered")
    end
end)

-- Toggle to switch between default (70) and custom FOV
Section:NewToggle("Enable FOV", "Toggle FOV", function(state)
    isToggleOn = state
    if isToggleOn then
        Camera.FieldOfView = customFOV
    else
        Camera.FieldOfView = 70 -- Reset to default FOV (70) when toggle is off
    end
end)

-- Reset to default FOV when the player leaves the game
game.Players.PlayerRemoving:Connect(function(player)
    if player == Player then
        Camera.FieldOfView = 70 -- Reset FOV to default
    end
end)
local localPlayer = game.Players.LocalPlayer
local camera = game.Workspace.CurrentCamera

-- Function to calculate distance between two positions
local function getDistance(pos1, pos2)
    return (pos1 - pos2).Magnitude
end

-- Function to get player's display name with username
local function getPlayerDisplayName(player)
    return player.DisplayName .. " (" .. player.Name .. ")"
end

-- Function to find the nearest player to the local player
local function getNearestPlayer()
    local nearestPlayer = nil
    local nearestDistance = math.huge

    for _, player in ipairs(game.Players:GetPlayers()) do
        if player ~= localPlayer and game.Workspace.Live:FindFirstChild(player.Name) then
            local playerChar = game.Workspace.Live[player.Name]
            if playerChar:FindFirstChild("HumanoidRootPart") then
                local distance = getDistance(localPlayer.Character.HumanoidRootPart.Position, playerChar.HumanoidRootPart.Position)
                if distance < nearestDistance then
                    nearestDistance = distance
                    nearestPlayer = player
                end
            end
        end
    end

    return nearestPlayer
end

-- Get the Weakest Dummy
local function getWeakestDummy()
    return game.Workspace.Live:FindFirstChild("Weakest Dummy")
end

-- Check for Crab Boss
local function getCrabBoss()
    return game.Workspace.Live:FindFirstChild("Crab Boss")
end

local dropdown = Section:NewDropdown("Players", "Select a player", {}, function(selected)
    -- Handle selection
    if selected == "You" then
        -- Set the camera to follow the local player's Humanoid
        if localPlayer.Character and localPlayer.Character:FindFirstChild("Humanoid") then
            camera.CameraSubject = localPlayer.Character.Humanoid
        end
    elseif selected == "Weakest Dummy" then
        -- Parent the camera to Weakest Dummy's Head
        local weakestDummy = getWeakestDummy()
        if weakestDummy and weakestDummy:FindFirstChild("Head") then
            camera.CameraSubject = weakestDummy.Head
        end
    elseif selected:match("Crab Boss: Found") then
        -- Parent the camera to Crab Boss's Head
        local crabBoss = getCrabBoss()
        if crabBoss and crabBoss:FindFirstChild("Head") then
            camera.CameraSubject = crabBoss.Head
        end
    else
        -- Parent the camera to the selected player's Head in Workspace.Live
        local targetName = selected:match(".*%((.*)%)") -- Extract username from "display_name (@username)"
        local target = game.Workspace.Live:FindFirstChild(targetName)
        if target and target:FindFirstChild("Head") then
            camera.CameraSubject = target.Head
        end
    end
end)

-- Function to update dropdown list
local function updateDropdownList()
    local playerNames = {"You"}

    -- Add Nearest Player in the middle with updated label
    local nearestPlayer = getNearestPlayer()
    local nearestLabel = "Nearest Player: "
    if nearestPlayer then
        nearestLabel = nearestLabel .. getPlayerDisplayName(nearestPlayer)
    else
        nearestLabel = nearestLabel .. "No One"
    end
    table.insert(playerNames, nearestLabel)

    -- Add Weakest Dummy to the list if it exists
    local weakestDummy = getWeakestDummy()
    if weakestDummy then
        table.insert(playerNames, "Weakest Dummy")
    end

    -- Add Crab Boss status
    local crabBoss = getCrabBoss()
    local crabBossStatus = "Crab Boss: Not Found"
    if crabBoss then
        crabBossStatus = "Crab Boss: Found"
    end
    table.insert(playerNames, crabBossStatus)

    -- Add all players (except the local player) to the list
    local otherPlayers = {}
    for _, player in ipairs(game.Players:GetPlayers()) do
        if player ~= localPlayer then
            table.insert(otherPlayers, getPlayerDisplayName(player))
        end
    end

    -- Append other players after "Weakest Dummy" and "Crab Boss" status
    if weakestDummy then
        for _, playerName in ipairs(otherPlayers) do
            table.insert(playerNames, playerName)
        end
    else
        -- If Weakest Dummy does not exist, just add other players at the end
        for _, playerName in ipairs(otherPlayers) do
            table.insert(playerNames, playerName)
        end
    end

    -- Refresh the dropdown with updated list
    dropdown:Refresh(playerNames)
end

-- Handle player leaving
game.Players.PlayerRemoving:Connect(function(player)
    updateDropdownList() -- Update the dropdown list when a player leaves
end)

-- Infinite loop to update dropdown list
spawn(function()
    while true do
        updateDropdownList() -- Update the dropdown list
        wait(1) -- Adjustable time interval for refreshing (set to 1 second here)
    end
end)

-- Initial update to populate the dropdown list
updateDropdownList()
Section:NewButton("Infinite Yield", "OP FE admin commands", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/Lolosor/Alice/main/Inf2"))()
end)
Section:NewButton("Dex Explorer V3", "See what's inside the game", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/Babyhamsta/RBLX_Scripts/main/Universal/BypassedDarkDexV3.lua", true))()
end)
Section:NewButton("Animation Logger (By ._hawda)", "Detects current played animation", function()
    loadstring(game:HttpGet("https://pastefy.app/1hmYhdIw/raw"))()
end)
Section:NewButton("Aimbot", "Locks at the nearest player's head", function()
    loadstring(game:HttpGet("https://pastebin.com/raw/1Gp9c57U"))()
end)
Section:NewButton("Keyboard", "", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/advxzivhsjjdhxhsidifvsh/mobkeyboard/main/main.txt", true))()
end)
Section:NewButton("Speed Tracker", "By allah_isthebest", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/Lolosor/Alice/main/Speed"))()
end)
Section:NewButton("Copy play animation script", "", function()
    setclipboard([[
local player = game.Players.LocalPlayer
repeat wait() until player.Character.Humanoid
local humanoid = player.Character.Humanoid
local character = player.Character or player.CharacterAdded:Wait()
local UserInputService = game:GetService("UserInputService")

local anim2 = Instance.new("Animation")
anim2.AnimationId = "rbxassetid://enter id"

local playAnim2 = humanoid:LoadAnimation(anim2)
playAnim2:Play()
]])
end)
Section:NewButton("Copy play animation client script", "", function()
    setclipboard([[
local player = game.Players.LocalPlayer
repeat wait() until player.Character.Humanoid
local humanoid = player.Character.Humanoid
local character = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
local UserInputService = game:GetService("UserInputService")
debounce = false -- Activate debounce
local anim = Instance.new("Animation")
anim.AnimationId = "rbxassetid://enter id"
local playAnim = humanoid:LoadAnimation(anim)
anim.AnimationId = "rbxassetid://0" -- don't change anything here

spawn(function()
    wait(1)
    debounce = true
end)

playAnim:Play()
playAnim:AdjustSpeed(1)
wait(0.3)
playAnim:AdjustSpeed(1)

local Players = game:GetService("Players")
local Character = Players.LocalPlayer.Character or Players.LocalPlayer.CharacterAdded:Wait()

local animationPlayed = false -- Flag to track if the animation has already been played
]])
end)
Section:NewButton("Play animations UI", "", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/Fromonor/Ui/main/UI"))()
end)
Section:NewButton("Studs Calculator", "", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/Fromonor/E/main/Early"))()
end)
local Tab = Window:NewTab("Visuals")
local Section = Tab:NewSection("Visuals")
Section:NewButton("Red Aura", "", function()

end)
local Tab = Window:NewTab("Maps")
local Section = Tab:NewSection("Map")
Section:NewButton("Baseplate", "", function()
    
end)
local Tab = Window:NewTab("Other Hubs")
local Section = Tab:NewSection("Hubs")
Section:NewButton("Epic Hub", "By allah_isthebest", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/frosty-601/Epic-Hub/main/Script"))()
end)
Section:NewButton("Burner Hub", "By xVicity", function()
    loadstring(game:HttpGet('https://raw.githubusercontent.com/xVicity/BURNED/main/LATEST.lua'))()
end)
Section:NewButton("Animations", "By xVicity", function()
    loadstring(game:HttpGet('https://raw.githubusercontent.com/Mautiku/ehh/main/strong%20guest.lua.txt'))()
end)
local Tab = Window:NewTab("Credits")
local Section = Tab:NewSection("Alice, Allah_isthebest, NetlessKJ")
Section:NewKeybind("Toggle UI", "", Enum.KeyCode.Q, function()
	Library:ToggleUI()
end)

local ToggleScreenGui = Instance.new("ScreenGui")
ToggleScreenGui.Name = "ToggleGui"
ToggleScreenGui.ResetOnSpawn = false
ToggleScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

-- Create the ImageButton (Toggle)
local Toggle = Instance.new("ImageButton")
Toggle.Name = "Toggle"
Toggle.Parent = ToggleScreenGui
Toggle.BackgroundColor3 = Color3.fromRGB(0, 0, 0) -- Optional: Set background color if needed
Toggle.Position = UDim2.new(0.5, 80, -0, 0) -- Adjust the position as needed
Toggle.Size = UDim2.new(0, 40, 0, 40) -- Square size (change as needed)
Toggle.Image = "rbxassetid://127457301130081" -- The provided image ID
Toggle.Draggable = true -- Make the button draggable

-- Make the corners rounded (Optional)
local Corner = Instance.new("UICorner")
Corner.Parent = Toggle

-- Connect the button click to toggle the UI
Toggle.MouseButton1Click:Connect(function()
    Library:ToggleUI()
end)
